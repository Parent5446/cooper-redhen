.TH "backend::Matcher" 3 "14 Jul 2010" "Version 0.1" "RedHen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
backend::Matcher \- 
.PP
Store data necessary for sorting spectra in a searchable manner.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "def \fBadd\fP"
.br
.RI "\fIAdd a new spectrum to the \fBMatcher\fP. \fP"
.ti -1c
.RI "def \fBget\fP"
.br
.RI "\fIFind spectra similar to the given one. \fP"
.ti -1c
.RI "def \fBbove\fP"
.br
.RI "\fICalculate the difference or error between two spectra using Bove's algorithm. \fP"
.ti -1c
.RI "def \fBleast_squares\fP"
.br
.RI "\fICalculate the difference or error between two spectra using least squares. \fP"
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "int \fBFLAT_HEAVYSIDE_BITS\fP = 8"
.br
.RI "\fINumber of bits in the heavyside index. \fP"
.ti -1c
.RI "tuple \fBflat_heavyside\fP = \fBDictProperty\fP()"
.br
.RI "\fIList of flat-heavyside indices. \fP"
.ti -1c
.RI "tuple \fBordered_heavyside\fP = \fBDictProperty\fP()"
.br
.RI "\fIList of ordered-heavyside indices. \fP"
.ti -1c
.RI "tuple \fBpeak_list\fP = \fBGenericListProperty\fP()"
.br
.RI "\fIList of x-values for peaks and their associated spectra. \fP"
.ti -1c
.RI "tuple \fBhigh_low\fP = \fBDictProperty\fP()"
.br
.RI "\fIList of high-low table indices. \fP"
.ti -1c
.RI "tuple \fBchem_types\fP = \fBDictProperty\fP()"
.br
.RI "\fIList of chemical types. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Store data necessary for sorting spectra in a searchable manner. 

.PP
.nf
Store spectra data necessary for searching the database, then search the database
for candidates that may represent a given spectrum..fi
.PP
 
.PP
Definition at line 262 of file backend.py.
.SH "Member Function Documentation"
.PP 
.SS "def add ( self,  spectrum)"
.PP
Add a new spectrum to the \fBMatcher\fP. Add new spectrum data to the various \fBMatcher\fP data structures. Find the heavyside index, peaks, and other indices and add them to the data structures.
.PP
\fBParameters:\fP
.RS 4
\fIspectrum\fP \fBSpectrum\fP object
.PP
.nf
Add new spectrum data to the various Matcher data structures. Find the heavyside
index, peaks, and other indices and add them to the data structures.
.fi
.PP
 
.RE
.PP

.PP
Definition at line 291 of file backend.py.
.SS "def bove ( a,  b)"
.PP
Calculate the difference or error between two spectra using Bove's algorithm. \fBParameters:\fP
.RS 4
\fIa\fP \fBSpectrum\fP object to compare 
.br
\fIb\fP Other \fBSpectrum\fP object to compare 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer representing the error 
.RE
.PP

.PP
Definition at line 372 of file backend.py.
.SS "def get ( self,  spectrum)"
.PP
Find spectra similar to the given one. Find spectra that may represent the given \fBSpectrum\fP object by sorting the database using different heuristics, having them vote, and returning only the spectra deemed similar to the given spectrum.
.PP
\fBParameters:\fP
.RS 4
\fIspectrum\fP \fBSpectrum\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
List of similar \fBSpectrum\fP objects
.PP
.nf
Find spectra that may represent the given Spectrum object by sorting
the database using different heuristics, having them vote, and returning only
the spectra deemed similar to the given spectrum.
.fi
.PP
 
.RE
.PP

.PP
Definition at line 327 of file backend.py.
.SS "def least_squares ( a,  b)"
.PP
Calculate the difference or error between two spectra using least squares. \fBParameters:\fP
.RS 4
\fIa\fP \fBSpectrum\fP object to compare 
.br
\fIb\fP Other \fBSpectrum\fP object to compare 
.RE
.PP
\fBReturns:\fP
.RS 4
Integer representing the error 
.RE
.PP

.PP
Definition at line 380 of file backend.py.
.SH "Member Data Documentation"
.PP 
.SS "tuple \fBchem_types\fP = \fBDictProperty\fP()\fC [static]\fP"
.PP
List of chemical types. 
.PP
Definition at line 282 of file backend.py.
.SS "tuple \fBflat_heavyside\fP = \fBDictProperty\fP()\fC [static]\fP"
.PP
List of flat-heavyside indices. 
.PP
Definition at line 270 of file backend.py.
.SS "int \fBFLAT_HEAVYSIDE_BITS\fP = 8\fC [static]\fP"
.PP
Number of bits in the heavyside index. 
.PP
Definition at line 267 of file backend.py.
.SS "tuple \fBhigh_low\fP = \fBDictProperty\fP()\fC [static]\fP"
.PP
List of high-low table indices. 
.PP
Definition at line 279 of file backend.py.
.SS "tuple \fBordered_heavyside\fP = \fBDictProperty\fP()\fC [static]\fP"
.PP
List of ordered-heavyside indices. 
.PP
Definition at line 273 of file backend.py.
.SS "tuple \fBpeak_list\fP = \fBGenericListProperty\fP()\fC [static]\fP"
.PP
List of x-values for peaks and their associated spectra. 
.PP
Definition at line 276 of file backend.py.

.SH "Author"
.PP 
Generated automatically by Doxygen for RedHen from the source code.
